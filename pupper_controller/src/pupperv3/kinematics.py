from dataclasses import dataclass
import numpy as np
from numpy import sin, cos


@dataclass
class LegConfig:
    motor_base_length: float  # x-axis measure of motor to motor distance
    motor_base_width: float  # y-axis measure of motor to motor distance
    abduction_offset: float  # abduction offset (in +Ny>)
    link_2_x: float  # component of Bo_r_Co vector in -Bx> direction
    link_2_z: float  # component of Bo_r_Co vector in -Bz> direction
    link_3: float  # length (+) of lower leg


def leg_fk(qA, qB, qC, leg_config):
    L = leg_config.motor_base_length
    W = leg_config.motor_base_width
    LA = leg_config.abduction_offset
    LX = leg_config.link_2_x
    LZ = leg_config.link_2_z
    L3 = leg_config.link_3

    sA = sin(qA)
    cA = cos(qA)
    sB = sin(qB)
    cB = cos(qB)
    sC = sin(qC)
    cC = cos(qC)

    # Generated by MotionGenesis, use precomputed sin/cos
    Fx = -0.5*L - LX*cA - LZ*sA*cB - L3*(sC*cA+sA*cB*cC)
    Fy = LZ*sB + L3*sB*cC + LA - 0.5*W
    Fz = LX*sA + L3*(sA*sC-cA*cB*cC) - LZ*cA*cB
    return np.array((Fx, Fy, Fz))


def leg_jacobian(qA, qB, qC, leg_config):
    result = np.zeros((3, 3))
    LX = leg_config.link_2_x
    LZ = leg_config.link_2_z
    L3 = leg_config.link_3
    sA = sin(qA)
    cA = cos(qA)
    sB = sin(qB)
    cB = cos(qB)
    sC = sin(qC)
    cC = cos(qC)

    # Generated by MotionGenesis, converted to 0-indexing, use precomputed sin/cos
    result[0, 0] = LX*sA + L3*(sA*sC-cA*cB*cC) - LZ*cA*cB
    result[0, 1] = sA*sB*(LZ + L3*cC)
    result[0, 2] = -L3*(cA*cC-sA*sC*cB)
    result[1, 0] = 0
    result[1, 1] = cB*(LZ+L3*cC)
    result[1, 2] = -L3*sB*sC
    result[2, 0] = LX*cA + LZ*sA*cB + L3*(sC*cA+sA*cB*cC)
    result[2, 1] = sB*cA*(LZ+L3*cC)
    result[2, 2] = L3*(sA*cC+sC*cA*cB)

    return result


leg_config = LegConfig(motor_base_length=0,
                       motor_base_width=0,
                       abduction_offset=-0.05,
                       link_2_x=0.05,
                       link_2_z=0.05,
                       link_3=0.1)
print(leg_fk(0, 0, 0, leg_config))
print(leg_jacobian(0, 0, 0, leg_config))
